{
  "id": "9c9a6077-ea06-4ec8-81d5-eb9930942bb0",
  "title": "Data volume anomaly detector",
  "description": "",
  "tasks": {
    "check_and_alert": {
      "name": "check_and_alert",
      "description": "Build a custom task running js Code",
      "action": "dynatrace.automations:run-javascript",
      "input": {
        "script": "// optional import of sdk modules\nimport { execution } from '@dynatrace-sdk/automation-utils';\nimport { eventsClient, EventIngestEventType } from \"@dynatrace-sdk/client-classic-environment-v2\";\n\nconst PREDICTION_TASK_ID = 'predict_data_volume';\nconst VOLUME_TASK_ID = 'get_latest_volume';\n\nexport default async function ({ execution_id }) {\n  const e = await execution(execution_id);\n  const prediction = (await e.result(PREDICTION_TASK_ID))['result']['output'][0];\n  // get the current data volume of the last 60min\n  const volume = await e.result(VOLUME_TASK_ID);\n  const current_volume = volume['records'][0]['count'];\n  // get the predicted lower bound volume\n  const prediction_lower_bounds = prediction['timeSeriesDataWithPredictions']['records'][0]['dt.davis.forecast:lower'][0];\n    \n  console.log('Forecast status: ' + prediction['analysisStatus']);\n  console.log('Forecast quality: ' + prediction['forecastQualityAssessment']);\n  console.log('Forecast lower bound: ' + prediction_lower_bounds);\n  console.log('Current value: ' + current_volume);\n  if(current_volume < prediction_lower_bounds) {\n    console.log(\"Data volume anomaly detected!\");\n    eventsClient.createEvent({\n      body : {\n        eventType: EventIngestEventType.AvailabilityEvent,\n        title: 'Abnormal data volume drop',\n        properties: {\n        }\n      }\n    });\n  }\n}"
      },
      "position": {
        "x": 0,
        "y": 3
      },
      "predecessors": [
        "get_latest_volume"
      ],
      "conditions": {
        "states": {
          "get_latest_volume": "OK"
        }
      }
    },
    "get_latest_volume": {
      "name": "get_latest_volume",
      "description": "Executes DQL query",
      "action": "dynatrace.automations:execute-dql-query",
      "input": {
        "query": "fetch logs, from:now()-60min\n| summarize count = count()"
      },
      "position": {
        "x": 0,
        "y": 2
      },
      "predecessors": [
        "predict_data_volume"
      ],
      "conditions": {
        "states": {
          "predict_data_volume": "OK"
        }
      }
    },
    "predict_data_volume": {
      "name": "predict_data_volume",
      "description": "Execute a customizable AI/ML task using DavisÂ® analyzers",
      "action": "dynatrace.davis.workflow.actions:davis-analyze",
      "input": {
        "body": {
          "nPaths": 200,
          "timeSeriesData": "fetch logs | summarize count = count(), by: {`60m interval` = bin(timestamp, 60m)} | fieldsRename value = `count`",
          "forecastHorizon": 1,
          "generalParameters": {
            "timeframe": {
              "endTime": "now-1h",
              "startTime": "now-72h"
            },
            "logVerbosity": "WARNING",
            "resolveDimensionalQueryData": false
          },
          "coverageProbability": 0.9,
          "applyZeroLowerBoundHeuristic": true
        },
        "analyzerName": "dt.statistics.GenericForecastAnalyzer"
      },
      "position": {
        "x": 0,
        "y": 1
      },
      "predecessors": []
    }
  },
  "ownerType": "USER",
  "isPrivate": true,
  "trigger": {
    "schedule": {
      "rule": null,
      "trigger": {
        "type": "interval",
        "intervalMinutes": 60
      },
      "timezone": "Europe/Vienna",
      "isActive": true,
      "isFaulty": false,
      "nextExecution": "2023-09-01T11:00:00.000Z",
      "filterParameters": {
        "earliestStart": "2023-09-01",
        "earliestStartTime": "00:00"
      },
      "inputs": {}
    }
  },
  "schemaVersion": 3
}